#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebBanQA.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLCuaHangBanQA")]
	public partial class CHQADataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCartdeta(Cartdeta instance);
    partial void UpdateCartdeta(Cartdeta instance);
    partial void DeleteCartdeta(Cartdeta instance);
    partial void Insertcatalog(catalog instance);
    partial void Updatecatalog(catalog instance);
    partial void Deletecatalog(catalog instance);
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertComment(Comment instance);
    partial void UpdateComment(Comment instance);
    partial void DeleteComment(Comment instance);
    partial void InsertPay(Pay instance);
    partial void UpdatePay(Pay instance);
    partial void DeletePay(Pay instance);
    partial void InsertPaydeta(Paydeta instance);
    partial void UpdatePaydeta(Paydeta instance);
    partial void DeletePaydeta(Paydeta instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertSize(Size instance);
    partial void UpdateSize(Size instance);
    partial void DeleteSize(Size instance);
    partial void Insertstyle(style instance);
    partial void Updatestyle(style instance);
    partial void Deletestyle(style instance);
    #endregion
		
		public CHQADataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["QLCuaHangBanQAConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CHQADataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CHQADataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CHQADataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CHQADataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cart> Carts
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Cartdeta> Cartdetas
		{
			get
			{
				return this.GetTable<Cartdeta>();
			}
		}
		
		public System.Data.Linq.Table<catalog> catalogs
		{
			get
			{
				return this.GetTable<catalog>();
			}
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<Comment> Comments
		{
			get
			{
				return this.GetTable<Comment>();
			}
		}
		
		public System.Data.Linq.Table<Pay> Pays
		{
			get
			{
				return this.GetTable<Pay>();
			}
		}
		
		public System.Data.Linq.Table<Paydeta> Paydetas
		{
			get
			{
				return this.GetTable<Paydeta>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Size> Sizes
		{
			get
			{
				return this.GetTable<Size>();
			}
		}
		
		public System.Data.Linq.Table<style> styles
		{
			get
			{
				return this.GetTable<style>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cart")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CAR_id;
		
		private string _CAR_UID;
		
		private EntitySet<Cartdeta> _Cartdetas;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCAR_idChanging(string value);
    partial void OnCAR_idChanged();
    partial void OnCAR_UIDChanging(string value);
    partial void OnCAR_UIDChanged();
    #endregion
		
		public Cart()
		{
			this._Cartdetas = new EntitySet<Cartdeta>(new Action<Cartdeta>(this.attach_Cartdetas), new Action<Cartdeta>(this.detach_Cartdetas));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CAR_id
		{
			get
			{
				return this._CAR_id;
			}
			set
			{
				if ((this._CAR_id != value))
				{
					this.OnCAR_idChanging(value);
					this.SendPropertyChanging();
					this._CAR_id = value;
					this.SendPropertyChanged("CAR_id");
					this.OnCAR_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CAR_UID", DbType="VarChar(10)")]
		public string CAR_UID
		{
			get
			{
				return this._CAR_UID;
			}
			set
			{
				if ((this._CAR_UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCAR_UIDChanging(value);
					this.SendPropertyChanging();
					this._CAR_UID = value;
					this.SendPropertyChanged("CAR_UID");
					this.OnCAR_UIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Cartdeta", Storage="_Cartdetas", ThisKey="CAR_id", OtherKey="CD_CarID")]
		public EntitySet<Cartdeta> Cartdetas
		{
			get
			{
				return this._Cartdetas;
			}
			set
			{
				this._Cartdetas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart", Storage="_User", ThisKey="CAR_UID", OtherKey="U_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._CAR_UID = value.U_id;
					}
					else
					{
						this._CAR_UID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cartdetas(Cartdeta entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_Cartdetas(Cartdeta entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _U_id;
		
		private string _U_Fname;
		
		private string _U_Lname;
		
		private string _U_email;
		
		private string _U_status;
		
		private string _U_add;
		
		private string _U_name;
		
		private string _U_contact;
		
		private System.Nullable<System.DateTime> _U_created;
		
		private string _U_pass;
		
		private EntitySet<Cart> _Carts;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Pay> _Pays;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnU_idChanging(string value);
    partial void OnU_idChanged();
    partial void OnU_FnameChanging(string value);
    partial void OnU_FnameChanged();
    partial void OnU_LnameChanging(string value);
    partial void OnU_LnameChanged();
    partial void OnU_emailChanging(string value);
    partial void OnU_emailChanged();
    partial void OnU_statusChanging(string value);
    partial void OnU_statusChanged();
    partial void OnU_addChanging(string value);
    partial void OnU_addChanged();
    partial void OnU_nameChanging(string value);
    partial void OnU_nameChanged();
    partial void OnU_contactChanging(string value);
    partial void OnU_contactChanged();
    partial void OnU_createdChanging(System.Nullable<System.DateTime> value);
    partial void OnU_createdChanged();
    partial void OnU_passChanging(string value);
    partial void OnU_passChanged();
    #endregion
		
		public User()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Pays = new EntitySet<Pay>(new Action<Pay>(this.attach_Pays), new Action<Pay>(this.detach_Pays));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string U_id
		{
			get
			{
				return this._U_id;
			}
			set
			{
				if ((this._U_id != value))
				{
					this.OnU_idChanging(value);
					this.SendPropertyChanging();
					this._U_id = value;
					this.SendPropertyChanged("U_id");
					this.OnU_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Fname", DbType="NVarChar(200)")]
		public string U_Fname
		{
			get
			{
				return this._U_Fname;
			}
			set
			{
				if ((this._U_Fname != value))
				{
					this.OnU_FnameChanging(value);
					this.SendPropertyChanging();
					this._U_Fname = value;
					this.SendPropertyChanged("U_Fname");
					this.OnU_FnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_Lname", DbType="NVarChar(200)")]
		public string U_Lname
		{
			get
			{
				return this._U_Lname;
			}
			set
			{
				if ((this._U_Lname != value))
				{
					this.OnU_LnameChanging(value);
					this.SendPropertyChanging();
					this._U_Lname = value;
					this.SendPropertyChanged("U_Lname");
					this.OnU_LnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_email", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string U_email
		{
			get
			{
				return this._U_email;
			}
			set
			{
				if ((this._U_email != value))
				{
					this.OnU_emailChanging(value);
					this.SendPropertyChanging();
					this._U_email = value;
					this.SendPropertyChanged("U_email");
					this.OnU_emailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_status", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string U_status
		{
			get
			{
				return this._U_status;
			}
			set
			{
				if ((this._U_status != value))
				{
					this.OnU_statusChanging(value);
					this.SendPropertyChanging();
					this._U_status = value;
					this.SendPropertyChanged("U_status");
					this.OnU_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_add", DbType="NVarChar(200)")]
		public string U_add
		{
			get
			{
				return this._U_add;
			}
			set
			{
				if ((this._U_add != value))
				{
					this.OnU_addChanging(value);
					this.SendPropertyChanging();
					this._U_add = value;
					this.SendPropertyChanged("U_add");
					this.OnU_addChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_name", DbType="NVarChar(200)")]
		public string U_name
		{
			get
			{
				return this._U_name;
			}
			set
			{
				if ((this._U_name != value))
				{
					this.OnU_nameChanging(value);
					this.SendPropertyChanging();
					this._U_name = value;
					this.SendPropertyChanged("U_name");
					this.OnU_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_contact", DbType="NVarChar(15)")]
		public string U_contact
		{
			get
			{
				return this._U_contact;
			}
			set
			{
				if ((this._U_contact != value))
				{
					this.OnU_contactChanging(value);
					this.SendPropertyChanging();
					this._U_contact = value;
					this.SendPropertyChanged("U_contact");
					this.OnU_contactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_created", DbType="DateTime")]
		public System.Nullable<System.DateTime> U_created
		{
			get
			{
				return this._U_created;
			}
			set
			{
				if ((this._U_created != value))
				{
					this.OnU_createdChanging(value);
					this.SendPropertyChanging();
					this._U_created = value;
					this.SendPropertyChanged("U_created");
					this.OnU_createdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_U_pass", DbType="NVarChar(200)")]
		public string U_pass
		{
			get
			{
				return this._U_pass;
			}
			set
			{
				if ((this._U_pass != value))
				{
					this.OnU_passChanging(value);
					this.SendPropertyChanging();
					this._U_pass = value;
					this.SendPropertyChanged("U_pass");
					this.OnU_passChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Cart", Storage="_Carts", ThisKey="U_id", OtherKey="CAR_UID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_Comments", ThisKey="U_id", OtherKey="COM_UID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Pay", Storage="_Pays", ThisKey="U_id", OtherKey="PA_UID")]
		public EntitySet<Pay> Pays
		{
			get
			{
				return this._Pays;
			}
			set
			{
				this._Pays.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Pays(Pay entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Pays(Pay entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cartdeta")]
	public partial class Cartdeta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CD_id;
		
		private string _CD_PID;
		
		private string _CD_CarID;
		
		private System.Nullable<int> _CD_amount;
		
		private EntityRef<Cart> _Cart;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCD_idChanging(string value);
    partial void OnCD_idChanged();
    partial void OnCD_PIDChanging(string value);
    partial void OnCD_PIDChanged();
    partial void OnCD_CarIDChanging(string value);
    partial void OnCD_CarIDChanged();
    partial void OnCD_amountChanging(System.Nullable<int> value);
    partial void OnCD_amountChanged();
    #endregion
		
		public Cartdeta()
		{
			this._Cart = default(EntityRef<Cart>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CD_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CD_id
		{
			get
			{
				return this._CD_id;
			}
			set
			{
				if ((this._CD_id != value))
				{
					this.OnCD_idChanging(value);
					this.SendPropertyChanging();
					this._CD_id = value;
					this.SendPropertyChanged("CD_id");
					this.OnCD_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CD_PID", DbType="VarChar(10)")]
		public string CD_PID
		{
			get
			{
				return this._CD_PID;
			}
			set
			{
				if ((this._CD_PID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCD_PIDChanging(value);
					this.SendPropertyChanging();
					this._CD_PID = value;
					this.SendPropertyChanged("CD_PID");
					this.OnCD_PIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CD_CarID", DbType="VarChar(10)")]
		public string CD_CarID
		{
			get
			{
				return this._CD_CarID;
			}
			set
			{
				if ((this._CD_CarID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCD_CarIDChanging(value);
					this.SendPropertyChanging();
					this._CD_CarID = value;
					this.SendPropertyChanged("CD_CarID");
					this.OnCD_CarIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CD_amount", DbType="Int")]
		public System.Nullable<int> CD_amount
		{
			get
			{
				return this._CD_amount;
			}
			set
			{
				if ((this._CD_amount != value))
				{
					this.OnCD_amountChanging(value);
					this.SendPropertyChanging();
					this._CD_amount = value;
					this.SendPropertyChanged("CD_amount");
					this.OnCD_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Cartdeta", Storage="_Cart", ThisKey="CD_CarID", OtherKey="CAR_id", IsForeignKey=true)]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.Cartdetas.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.Cartdetas.Add(this);
						this._CD_CarID = value.CAR_id;
					}
					else
					{
						this._CD_CarID = default(string);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Cartdeta", Storage="_Product", ThisKey="CD_PID", OtherKey="P_id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Cartdetas.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Cartdetas.Add(this);
						this._CD_PID = value.P_id;
					}
					else
					{
						this._CD_PID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.catalog")]
	public partial class catalog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CA_id;
		
		private string _CA_name;
		
		private string _CA_STID;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<style> _style;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCA_idChanging(string value);
    partial void OnCA_idChanged();
    partial void OnCA_nameChanging(string value);
    partial void OnCA_nameChanged();
    partial void OnCA_STIDChanging(string value);
    partial void OnCA_STIDChanged();
    #endregion
		
		public catalog()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._style = default(EntityRef<style>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CA_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CA_id
		{
			get
			{
				return this._CA_id;
			}
			set
			{
				if ((this._CA_id != value))
				{
					this.OnCA_idChanging(value);
					this.SendPropertyChanging();
					this._CA_id = value;
					this.SendPropertyChanged("CA_id");
					this.OnCA_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CA_name", DbType="NVarChar(200)")]
		public string CA_name
		{
			get
			{
				return this._CA_name;
			}
			set
			{
				if ((this._CA_name != value))
				{
					this.OnCA_nameChanging(value);
					this.SendPropertyChanging();
					this._CA_name = value;
					this.SendPropertyChanged("CA_name");
					this.OnCA_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CA_STID", DbType="VarChar(10)")]
		public string CA_STID
		{
			get
			{
				return this._CA_STID;
			}
			set
			{
				if ((this._CA_STID != value))
				{
					if (this._style.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCA_STIDChanging(value);
					this.SendPropertyChanging();
					this._CA_STID = value;
					this.SendPropertyChanged("CA_STID");
					this.OnCA_STIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="catalog_Product", Storage="_Products", ThisKey="CA_id", OtherKey="P_CAID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="style_catalog", Storage="_style", ThisKey="CA_STID", OtherKey="ST_id", IsForeignKey=true)]
		public style style
		{
			get
			{
				return this._style.Entity;
			}
			set
			{
				style previousValue = this._style.Entity;
				if (((previousValue != value) 
							|| (this._style.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._style.Entity = null;
						previousValue.catalogs.Remove(this);
					}
					this._style.Entity = value;
					if ((value != null))
					{
						value.catalogs.Add(this);
						this._CA_STID = value.ST_id;
					}
					else
					{
						this._CA_STID = default(string);
					}
					this.SendPropertyChanged("style");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.catalog = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.catalog = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Color")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _COL_id;
		
		private string _COL_name;
		
		private string _COL_slug;
		
		private string _COL_PID;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOL_idChanging(string value);
    partial void OnCOL_idChanged();
    partial void OnCOL_nameChanging(string value);
    partial void OnCOL_nameChanged();
    partial void OnCOL_slugChanging(string value);
    partial void OnCOL_slugChanged();
    partial void OnCOL_PIDChanging(string value);
    partial void OnCOL_PIDChanged();
    #endregion
		
		public Color()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COL_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string COL_id
		{
			get
			{
				return this._COL_id;
			}
			set
			{
				if ((this._COL_id != value))
				{
					this.OnCOL_idChanging(value);
					this.SendPropertyChanging();
					this._COL_id = value;
					this.SendPropertyChanged("COL_id");
					this.OnCOL_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COL_name", DbType="NVarChar(200)")]
		public string COL_name
		{
			get
			{
				return this._COL_name;
			}
			set
			{
				if ((this._COL_name != value))
				{
					this.OnCOL_nameChanging(value);
					this.SendPropertyChanging();
					this._COL_name = value;
					this.SendPropertyChanged("COL_name");
					this.OnCOL_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COL_slug", DbType="NVarChar(100)")]
		public string COL_slug
		{
			get
			{
				return this._COL_slug;
			}
			set
			{
				if ((this._COL_slug != value))
				{
					this.OnCOL_slugChanging(value);
					this.SendPropertyChanging();
					this._COL_slug = value;
					this.SendPropertyChanged("COL_slug");
					this.OnCOL_slugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COL_PID", DbType="VarChar(10)")]
		public string COL_PID
		{
			get
			{
				return this._COL_PID;
			}
			set
			{
				if ((this._COL_PID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOL_PIDChanging(value);
					this.SendPropertyChanging();
					this._COL_PID = value;
					this.SendPropertyChanged("COL_PID");
					this.OnCOL_PIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Color", Storage="_Product", ThisKey="COL_PID", OtherKey="P_id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Colors.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Colors.Add(this);
						this._COL_PID = value.P_id;
					}
					else
					{
						this._COL_PID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Comment")]
	public partial class Comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _COM_id;
		
		private string _COM_content;
		
		private string _COM_UID;
		
		private string _COM_PID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCOM_idChanging(string value);
    partial void OnCOM_idChanged();
    partial void OnCOM_contentChanging(string value);
    partial void OnCOM_contentChanged();
    partial void OnCOM_UIDChanging(string value);
    partial void OnCOM_UIDChanged();
    partial void OnCOM_PIDChanging(string value);
    partial void OnCOM_PIDChanged();
    #endregion
		
		public Comment()
		{
			this._User = default(EntityRef<User>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COM_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string COM_id
		{
			get
			{
				return this._COM_id;
			}
			set
			{
				if ((this._COM_id != value))
				{
					this.OnCOM_idChanging(value);
					this.SendPropertyChanging();
					this._COM_id = value;
					this.SendPropertyChanged("COM_id");
					this.OnCOM_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COM_content", DbType="NVarChar(300)")]
		public string COM_content
		{
			get
			{
				return this._COM_content;
			}
			set
			{
				if ((this._COM_content != value))
				{
					this.OnCOM_contentChanging(value);
					this.SendPropertyChanging();
					this._COM_content = value;
					this.SendPropertyChanged("COM_content");
					this.OnCOM_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COM_UID", DbType="VarChar(10)")]
		public string COM_UID
		{
			get
			{
				return this._COM_UID;
			}
			set
			{
				if ((this._COM_UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOM_UIDChanging(value);
					this.SendPropertyChanging();
					this._COM_UID = value;
					this.SendPropertyChanged("COM_UID");
					this.OnCOM_UIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_COM_PID", DbType="VarChar(10)")]
		public string COM_PID
		{
			get
			{
				return this._COM_PID;
			}
			set
			{
				if ((this._COM_PID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCOM_PIDChanging(value);
					this.SendPropertyChanging();
					this._COM_PID = value;
					this.SendPropertyChanged("COM_PID");
					this.OnCOM_PIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Comment", Storage="_User", ThisKey="COM_UID", OtherKey="U_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._COM_UID = value.U_id;
					}
					else
					{
						this._COM_UID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Comment", Storage="_Product", ThisKey="COM_PID", OtherKey="P_id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Comments.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Comments.Add(this);
						this._COM_PID = value.P_id;
					}
					else
					{
						this._COM_PID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pay")]
	public partial class Pay : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PA_id;
		
		private System.Nullable<System.DateTime> _PA_date;
		
		private string _PA_select;
		
		private string _PA_status;
		
		private string _PA_UID;
		
		private EntitySet<Paydeta> _Paydetas;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPA_idChanging(string value);
    partial void OnPA_idChanged();
    partial void OnPA_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnPA_dateChanged();
    partial void OnPA_selectChanging(string value);
    partial void OnPA_selectChanged();
    partial void OnPA_statusChanging(string value);
    partial void OnPA_statusChanged();
    partial void OnPA_UIDChanging(string value);
    partial void OnPA_UIDChanged();
    #endregion
		
		public Pay()
		{
			this._Paydetas = new EntitySet<Paydeta>(new Action<Paydeta>(this.attach_Paydetas), new Action<Paydeta>(this.detach_Paydetas));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PA_id
		{
			get
			{
				return this._PA_id;
			}
			set
			{
				if ((this._PA_id != value))
				{
					this.OnPA_idChanging(value);
					this.SendPropertyChanging();
					this._PA_id = value;
					this.SendPropertyChanged("PA_id");
					this.OnPA_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> PA_date
		{
			get
			{
				return this._PA_date;
			}
			set
			{
				if ((this._PA_date != value))
				{
					this.OnPA_dateChanging(value);
					this.SendPropertyChanging();
					this._PA_date = value;
					this.SendPropertyChanged("PA_date");
					this.OnPA_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA_select", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PA_select
		{
			get
			{
				return this._PA_select;
			}
			set
			{
				if ((this._PA_select != value))
				{
					this.OnPA_selectChanging(value);
					this.SendPropertyChanging();
					this._PA_select = value;
					this.SendPropertyChanged("PA_select");
					this.OnPA_selectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA_status", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string PA_status
		{
			get
			{
				return this._PA_status;
			}
			set
			{
				if ((this._PA_status != value))
				{
					this.OnPA_statusChanging(value);
					this.SendPropertyChanging();
					this._PA_status = value;
					this.SendPropertyChanged("PA_status");
					this.OnPA_statusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PA_UID", DbType="VarChar(10)")]
		public string PA_UID
		{
			get
			{
				return this._PA_UID;
			}
			set
			{
				if ((this._PA_UID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPA_UIDChanging(value);
					this.SendPropertyChanging();
					this._PA_UID = value;
					this.SendPropertyChanged("PA_UID");
					this.OnPA_UIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pay_Paydeta", Storage="_Paydetas", ThisKey="PA_id", OtherKey="PD_PAID")]
		public EntitySet<Paydeta> Paydetas
		{
			get
			{
				return this._Paydetas;
			}
			set
			{
				this._Paydetas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Pay", Storage="_User", ThisKey="PA_UID", OtherKey="U_id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Pays.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Pays.Add(this);
						this._PA_UID = value.U_id;
					}
					else
					{
						this._PA_UID = default(string);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Paydetas(Paydeta entity)
		{
			this.SendPropertyChanging();
			entity.Pay = this;
		}
		
		private void detach_Paydetas(Paydeta entity)
		{
			this.SendPropertyChanging();
			entity.Pay = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Paydeta")]
	public partial class Paydeta : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PD_id;
		
		private string _PD_PID;
		
		private string _PD_PAID;
		
		private System.Nullable<int> _PD_amount;
		
		private EntityRef<Pay> _Pay;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPD_idChanging(string value);
    partial void OnPD_idChanged();
    partial void OnPD_PIDChanging(string value);
    partial void OnPD_PIDChanged();
    partial void OnPD_PAIDChanging(string value);
    partial void OnPD_PAIDChanged();
    partial void OnPD_amountChanging(System.Nullable<int> value);
    partial void OnPD_amountChanged();
    #endregion
		
		public Paydeta()
		{
			this._Pay = default(EntityRef<Pay>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PD_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PD_id
		{
			get
			{
				return this._PD_id;
			}
			set
			{
				if ((this._PD_id != value))
				{
					this.OnPD_idChanging(value);
					this.SendPropertyChanging();
					this._PD_id = value;
					this.SendPropertyChanged("PD_id");
					this.OnPD_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PD_PID", DbType="VarChar(10)")]
		public string PD_PID
		{
			get
			{
				return this._PD_PID;
			}
			set
			{
				if ((this._PD_PID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPD_PIDChanging(value);
					this.SendPropertyChanging();
					this._PD_PID = value;
					this.SendPropertyChanged("PD_PID");
					this.OnPD_PIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PD_PAID", DbType="VarChar(10)")]
		public string PD_PAID
		{
			get
			{
				return this._PD_PAID;
			}
			set
			{
				if ((this._PD_PAID != value))
				{
					if (this._Pay.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPD_PAIDChanging(value);
					this.SendPropertyChanging();
					this._PD_PAID = value;
					this.SendPropertyChanged("PD_PAID");
					this.OnPD_PAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PD_amount", DbType="Int")]
		public System.Nullable<int> PD_amount
		{
			get
			{
				return this._PD_amount;
			}
			set
			{
				if ((this._PD_amount != value))
				{
					this.OnPD_amountChanging(value);
					this.SendPropertyChanging();
					this._PD_amount = value;
					this.SendPropertyChanged("PD_amount");
					this.OnPD_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pay_Paydeta", Storage="_Pay", ThisKey="PD_PAID", OtherKey="PA_id", IsForeignKey=true)]
		public Pay Pay
		{
			get
			{
				return this._Pay.Entity;
			}
			set
			{
				Pay previousValue = this._Pay.Entity;
				if (((previousValue != value) 
							|| (this._Pay.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pay.Entity = null;
						previousValue.Paydetas.Remove(this);
					}
					this._Pay.Entity = value;
					if ((value != null))
					{
						value.Paydetas.Add(this);
						this._PD_PAID = value.PA_id;
					}
					else
					{
						this._PD_PAID = default(string);
					}
					this.SendPropertyChanged("Pay");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Paydeta", Storage="_Product", ThisKey="PD_PID", OtherKey="P_id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Paydetas.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Paydetas.Add(this);
						this._PD_PID = value.P_id;
					}
					else
					{
						this._PD_PID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _P_id;
		
		private string _P_name;
		
		private System.Nullable<double> _P_discount;
		
		private System.Nullable<decimal> _P_Price;
		
		private string _P_image;
		
		private string _P_note;
		
		private System.Nullable<int> _P_amount;
		
		private string _P_content;
		
		private string _P_CAID;
		
		private string _P_slug;
		
		private EntitySet<Cartdeta> _Cartdetas;
		
		private EntitySet<Color> _Colors;
		
		private EntitySet<Comment> _Comments;
		
		private EntitySet<Paydeta> _Paydetas;
		
		private EntitySet<Size> _Sizes;
		
		private EntityRef<catalog> _catalog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnP_idChanging(string value);
    partial void OnP_idChanged();
    partial void OnP_nameChanging(string value);
    partial void OnP_nameChanged();
    partial void OnP_discountChanging(System.Nullable<double> value);
    partial void OnP_discountChanged();
    partial void OnP_PriceChanging(System.Nullable<decimal> value);
    partial void OnP_PriceChanged();
    partial void OnP_imageChanging(string value);
    partial void OnP_imageChanged();
    partial void OnP_noteChanging(string value);
    partial void OnP_noteChanged();
    partial void OnP_amountChanging(System.Nullable<int> value);
    partial void OnP_amountChanged();
    partial void OnP_contentChanging(string value);
    partial void OnP_contentChanged();
    partial void OnP_CAIDChanging(string value);
    partial void OnP_CAIDChanged();
    partial void OnP_slugChanging(string value);
    partial void OnP_slugChanged();
    #endregion
		
		public Product()
		{
			this._Cartdetas = new EntitySet<Cartdeta>(new Action<Cartdeta>(this.attach_Cartdetas), new Action<Cartdeta>(this.detach_Cartdetas));
			this._Colors = new EntitySet<Color>(new Action<Color>(this.attach_Colors), new Action<Color>(this.detach_Colors));
			this._Comments = new EntitySet<Comment>(new Action<Comment>(this.attach_Comments), new Action<Comment>(this.detach_Comments));
			this._Paydetas = new EntitySet<Paydeta>(new Action<Paydeta>(this.attach_Paydetas), new Action<Paydeta>(this.detach_Paydetas));
			this._Sizes = new EntitySet<Size>(new Action<Size>(this.attach_Sizes), new Action<Size>(this.detach_Sizes));
			this._catalog = default(EntityRef<catalog>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string P_id
		{
			get
			{
				return this._P_id;
			}
			set
			{
				if ((this._P_id != value))
				{
					this.OnP_idChanging(value);
					this.SendPropertyChanging();
					this._P_id = value;
					this.SendPropertyChanged("P_id");
					this.OnP_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_name", DbType="NVarChar(200)")]
		public string P_name
		{
			get
			{
				return this._P_name;
			}
			set
			{
				if ((this._P_name != value))
				{
					this.OnP_nameChanging(value);
					this.SendPropertyChanging();
					this._P_name = value;
					this.SendPropertyChanged("P_name");
					this.OnP_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_discount", DbType="Float")]
		public System.Nullable<double> P_discount
		{
			get
			{
				return this._P_discount;
			}
			set
			{
				if ((this._P_discount != value))
				{
					this.OnP_discountChanging(value);
					this.SendPropertyChanging();
					this._P_discount = value;
					this.SendPropertyChanged("P_discount");
					this.OnP_discountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_Price", DbType="Money")]
		public System.Nullable<decimal> P_Price
		{
			get
			{
				return this._P_Price;
			}
			set
			{
				if ((this._P_Price != value))
				{
					this.OnP_PriceChanging(value);
					this.SendPropertyChanging();
					this._P_Price = value;
					this.SendPropertyChanged("P_Price");
					this.OnP_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_image", DbType="NVarChar(300)")]
		public string P_image
		{
			get
			{
				return this._P_image;
			}
			set
			{
				if ((this._P_image != value))
				{
					this.OnP_imageChanging(value);
					this.SendPropertyChanging();
					this._P_image = value;
					this.SendPropertyChanged("P_image");
					this.OnP_imageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_note", DbType="NVarChar(2000)")]
		public string P_note
		{
			get
			{
				return this._P_note;
			}
			set
			{
				if ((this._P_note != value))
				{
					this.OnP_noteChanging(value);
					this.SendPropertyChanging();
					this._P_note = value;
					this.SendPropertyChanged("P_note");
					this.OnP_noteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_amount", DbType="Int")]
		public System.Nullable<int> P_amount
		{
			get
			{
				return this._P_amount;
			}
			set
			{
				if ((this._P_amount != value))
				{
					this.OnP_amountChanging(value);
					this.SendPropertyChanging();
					this._P_amount = value;
					this.SendPropertyChanged("P_amount");
					this.OnP_amountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_content", DbType="NVarChar(2000)")]
		public string P_content
		{
			get
			{
				return this._P_content;
			}
			set
			{
				if ((this._P_content != value))
				{
					this.OnP_contentChanging(value);
					this.SendPropertyChanging();
					this._P_content = value;
					this.SendPropertyChanged("P_content");
					this.OnP_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_CAID", DbType="VarChar(10)")]
		public string P_CAID
		{
			get
			{
				return this._P_CAID;
			}
			set
			{
				if ((this._P_CAID != value))
				{
					if (this._catalog.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnP_CAIDChanging(value);
					this.SendPropertyChanging();
					this._P_CAID = value;
					this.SendPropertyChanged("P_CAID");
					this.OnP_CAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_P_slug", DbType="NVarChar(100)")]
		public string P_slug
		{
			get
			{
				return this._P_slug;
			}
			set
			{
				if ((this._P_slug != value))
				{
					this.OnP_slugChanging(value);
					this.SendPropertyChanging();
					this._P_slug = value;
					this.SendPropertyChanged("P_slug");
					this.OnP_slugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Cartdeta", Storage="_Cartdetas", ThisKey="P_id", OtherKey="CD_PID")]
		public EntitySet<Cartdeta> Cartdetas
		{
			get
			{
				return this._Cartdetas;
			}
			set
			{
				this._Cartdetas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Color", Storage="_Colors", ThisKey="P_id", OtherKey="COL_PID")]
		public EntitySet<Color> Colors
		{
			get
			{
				return this._Colors;
			}
			set
			{
				this._Colors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Comment", Storage="_Comments", ThisKey="P_id", OtherKey="COM_PID")]
		public EntitySet<Comment> Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				this._Comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Paydeta", Storage="_Paydetas", ThisKey="P_id", OtherKey="PD_PID")]
		public EntitySet<Paydeta> Paydetas
		{
			get
			{
				return this._Paydetas;
			}
			set
			{
				this._Paydetas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Size", Storage="_Sizes", ThisKey="P_id", OtherKey="S_PID")]
		public EntitySet<Size> Sizes
		{
			get
			{
				return this._Sizes;
			}
			set
			{
				this._Sizes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="catalog_Product", Storage="_catalog", ThisKey="P_CAID", OtherKey="CA_id", IsForeignKey=true)]
		public catalog catalog
		{
			get
			{
				return this._catalog.Entity;
			}
			set
			{
				catalog previousValue = this._catalog.Entity;
				if (((previousValue != value) 
							|| (this._catalog.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._catalog.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._catalog.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._P_CAID = value.CA_id;
					}
					else
					{
						this._P_CAID = default(string);
					}
					this.SendPropertyChanged("catalog");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cartdetas(Cartdeta entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Cartdetas(Cartdeta entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Colors(Color entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Colors(Color entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Comments(Comment entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Paydetas(Paydeta entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Paydetas(Paydeta entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Sizes(Size entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Size")]
	public partial class Size : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _S_id;
		
		private string _S_name;
		
		private string _S_PID;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnS_idChanging(string value);
    partial void OnS_idChanged();
    partial void OnS_nameChanging(string value);
    partial void OnS_nameChanged();
    partial void OnS_PIDChanging(string value);
    partial void OnS_PIDChanged();
    #endregion
		
		public Size()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string S_id
		{
			get
			{
				return this._S_id;
			}
			set
			{
				if ((this._S_id != value))
				{
					this.OnS_idChanging(value);
					this.SendPropertyChanging();
					this._S_id = value;
					this.SendPropertyChanged("S_id");
					this.OnS_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_name", DbType="NVarChar(200)")]
		public string S_name
		{
			get
			{
				return this._S_name;
			}
			set
			{
				if ((this._S_name != value))
				{
					this.OnS_nameChanging(value);
					this.SendPropertyChanging();
					this._S_name = value;
					this.SendPropertyChanged("S_name");
					this.OnS_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_S_PID", DbType="VarChar(10)")]
		public string S_PID
		{
			get
			{
				return this._S_PID;
			}
			set
			{
				if ((this._S_PID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnS_PIDChanging(value);
					this.SendPropertyChanging();
					this._S_PID = value;
					this.SendPropertyChanged("S_PID");
					this.OnS_PIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Size", Storage="_Product", ThisKey="S_PID", OtherKey="P_id", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Sizes.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Sizes.Add(this);
						this._S_PID = value.P_id;
					}
					else
					{
						this._S_PID = default(string);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.style")]
	public partial class style : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ST_id;
		
		private string _ST_name;
		
		private string _ST_slug;
		
		private EntitySet<catalog> _catalogs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnST_idChanging(string value);
    partial void OnST_idChanged();
    partial void OnST_nameChanging(string value);
    partial void OnST_nameChanged();
    partial void OnST_slugChanging(string value);
    partial void OnST_slugChanged();
    #endregion
		
		public style()
		{
			this._catalogs = new EntitySet<catalog>(new Action<catalog>(this.attach_catalogs), new Action<catalog>(this.detach_catalogs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ST_id", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ST_id
		{
			get
			{
				return this._ST_id;
			}
			set
			{
				if ((this._ST_id != value))
				{
					this.OnST_idChanging(value);
					this.SendPropertyChanging();
					this._ST_id = value;
					this.SendPropertyChanged("ST_id");
					this.OnST_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ST_name", DbType="NVarChar(200)")]
		public string ST_name
		{
			get
			{
				return this._ST_name;
			}
			set
			{
				if ((this._ST_name != value))
				{
					this.OnST_nameChanging(value);
					this.SendPropertyChanging();
					this._ST_name = value;
					this.SendPropertyChanged("ST_name");
					this.OnST_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ST_slug", DbType="NVarChar(200)")]
		public string ST_slug
		{
			get
			{
				return this._ST_slug;
			}
			set
			{
				if ((this._ST_slug != value))
				{
					this.OnST_slugChanging(value);
					this.SendPropertyChanging();
					this._ST_slug = value;
					this.SendPropertyChanged("ST_slug");
					this.OnST_slugChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="style_catalog", Storage="_catalogs", ThisKey="ST_id", OtherKey="CA_STID")]
		public EntitySet<catalog> catalogs
		{
			get
			{
				return this._catalogs;
			}
			set
			{
				this._catalogs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_catalogs(catalog entity)
		{
			this.SendPropertyChanging();
			entity.style = this;
		}
		
		private void detach_catalogs(catalog entity)
		{
			this.SendPropertyChanging();
			entity.style = null;
		}
	}
}
#pragma warning restore 1591
